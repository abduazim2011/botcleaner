from flask import Flask
from threading import Thread
import re
import time
import os
import json
import asyncio
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ChatPermissions
from telegram.constants import ChatMemberStatus
from telegram.ext import (
    ApplicationBuilder, ContextTypes, MessageHandler,
    CommandHandler, CallbackQueryHandler, ChatMemberHandler, filters
)

# üåê Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
app = Flask('')

@app.route('/')
def home():
    return "–ë–æ—Ç –∂–∏–≤! –ü–∏—à–∏—Ç–µ @tozalashkerak_bot —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É."

def run_web():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    Thread(target=run_web).start()

# üìÇ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
nest_asyncio.apply()
TOKEN = "8080826250:AAHY4wpmF46mcLSkZVTxr8paB8IHh5VNbPM"  # ‚õî –£–∫–∞–∂–∏ —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç @BotFather
GROUPS_DIR = "groups"
os.makedirs(GROUPS_DIR, exist_ok=True)

# üì• –ó–∞–≥—Ä—É–∑–∫–∞ badwords
def load_badwords():
    path = "badwords.txt"
    with open(path, "r", encoding="utf-8") as f:
        patterns = [line.strip() for line in f if line.strip()]
    compiled = []
    for i, p in enumerate(patterns, start=1):
        try:
            compiled.append(re.compile(p))
        except re.error as e:
            print(f"[!] –û—à–∏–±–∫–∞ –≤ —Å—Ç—Ä–æ–∫–µ {i}: {p} ‚Üí {e}")
    return compiled

# üë§ –†–∞–±–æ—Ç–∞ —Å –≥—Ä—É–ø–ø–∞–º–∏
def user_group_file(user_id):
    return os.path.join(GROUPS_DIR, f"{user_id}.json")

def save_user_group(user_id, group_id, title, is_admin):
    path = user_group_file(user_id)
    data = {}
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
    data[str(group_id)] = {"title": title, "is_admin": is_admin}
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f)

def load_user_groups(user_id):
    path = user_group_file(user_id)
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# üì≤ –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.chat.type != "private":
        return

    keyboard = [
        [
            InlineKeyboardButton("‚ú®–ó–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏", url="https://t.me/Soqa_pul_bot?start=1040339009")
        ],
        [
            InlineKeyboardButton("üìã –ú–æ–∏ –≥—Ä—É–ø–ø—ã", callback_data="my_groups")
        ],
        [
            InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")
        ],
        [
            InlineKeyboardButton("üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url="https://t.me/Azimchik_tg")
        ],
        [
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=f"https://t.me/{context.bot.username}?startgroup=true")
        ]
    ]
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî *–º–æ–¥–µ—Ä–∞—Ç–æ—Ä-–±–æ—Ç*, –∫–æ—Ç–æ—Ä—ã–π:\n"
        "- —É–¥–∞–ª—è–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n"
        "- –±–ª–æ–∫–∏—Ä—É–µ—Ç –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π\n"
        "- –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫\n\n"
        "‚û§ –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ —Å–≤–æ—é –≥—Ä—É–ø–ø—É, –∏ —è –Ω–∞—á–Ω—É —Ä–∞–±–æ—Ç—É!\n\n"
        "  –ü–æ–∑–¥—Ä–∞–≤–ª—è—éüéâ [–≤—ã](tg://settings/) –≤—ã–∏–≥—Ä–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤ –∫–æ—Ç–æ—Ä–æ–º –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ –∑–∞ –∑–∞–¥–∞–Ω–∏—è –±—ã—Å—Ç—Ä–æ."
        "  –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ ",
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

# üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "info":
        await query.edit_message_text(
            "üìò *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            "–ï—Å–ª–∏ —Å–¥–µ–ª–∞–µ—Ç–µ –º–µ–Ω—è –∞–¥–º–∏–Ω–æ–º"
            "–≤ –≥—Ä—É–ø–ø–µ —è –±—É–¥—É —É–¥–∞–ª—è—Ç—å:\n"
            "- —Ä–µ–∫–ª–∞–º—É\n"
            "- –º–∞—Ç—ã\n"
            "- —Å—Å—ã–ª–∫–∏\n"
            "- —Å–ø–∞–º\n"
            "–ü–æ—Å–ª–µ 5 –Ω–∞—Ä—É—à–µ–Ω–∏–π ‚Äî –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.üö®\n",
            parse_mode="Markdown"
        )
    elif query.data == "my_groups":
        groups = load_user_groups(user_id)
        if not groups:
            await query.edit_message_text("‚ÑπÔ∏è –Ø –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É.")
            return

        buttons = []
        for gid, info in groups.items():
            label = f"{info['title']} ({'‚úÖ –Ø –∞–¥–º–∏–Ω' if info['is_admin'] else '‚ùå –Ø –Ω–µ –∞–¥–º–∏–Ω'})"
            buttons.append([InlineKeyboardButton(label, callback_data=f"settings_{gid}")])

        await query.edit_message_text(
            "*üìã –ú–æ–∏ –≥—Ä—É–ø–ø—ã:*",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )
    elif query.data.startswith("settings_"):
        chat_id = query.data.split("_")[1]
        groups = load_user_groups(user_id)
        info = groups.get(chat_id)
        if not info:
            await query.edit_message_text("‚ö†Ô∏è –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        muted = context.chat_data.get("muted_users", {})
        await query.edit_message_text(
            f"*–ì—Ä—É–ø–ø–∞:* {info['title']}\n"
            f"*ID:* `{chat_id}`\n"
            f"*–ê–¥–º–∏–Ω:* {'‚úÖ' if info['is_admin'] else '‚ùå'}\n"
            f"*–ó–∞–º—É—á–µ–Ω–æ:* {len(muted)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            parse_mode="Markdown"
        )

# üìå –£—á—ë—Ç –≥—Ä—É–ø–ø
async def track_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.my_chat_member.chat
    user = update.my_chat_member.from_user
    new_status = update.my_chat_member.new_chat_member.status

    if new_status in ["member", "administrator"]:
        save_user_group(
            user.id,
            chat.id,
            chat.title or str(chat.id),
            is_admin=new_status == "administrator"
        )

# üßº –û—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (badwords + –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ)
badword_patterns = load_badwords()

async def clean_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user = update.effective_user
    chat = update.effective_chat
    text = update.message.text or update.message.caption or ""

    if user.username == "GroupAnonymousBot" or user.id == 1087968824:
        return

    mention = f"[{user.first_name}](tg://user?id={user.id})"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ badwords –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    is_forwarded = update.message.forward_from or update.message.forward_from_chat

    if is_forwarded or any(pattern.search(text) for pattern in badword_patterns):
        try:
            await update.message.delete()
        except:
            pass

        # –ï—Å–ª–∏ —ç—Ç–æ badword, —Å—á–∏—Ç–∞–µ–º –Ω–∞—Ä—É—à–µ–Ω–∏—è
        if not is_forwarded:
            uid = user.id
            violations = context.chat_data.setdefault("violations", {})
            violations[uid] = violations.get(uid, 0) + 1
            count = violations[uid]

            if count < 5:
                await context.bot.send_message(
                    chat.id,
                    f"‚ö†Ô∏è {mention}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {count}/5. –ù–µ –Ω–∞—Ä—É—à–∞–π!",
                    parse_mode="Markdown"
                )
            else:
                member = await context.bot.get_chat_member(chat.id, uid)
                if member.status not in ["administrator", "creator"]:
                    await context.bot.restrict_chat_member(
                        chat.id, uid, ChatPermissions(can_send_messages=False)
                    )
                    context.chat_data.setdefault("muted_users", {})[uid] = {
                        "username": user.username,
                        "name": user.first_name,
                        "muted_at": time.time()
                    }
                    await context.bot.send_message(
                        chat.id,
                        f"üö´ {mention}, —Ç—ã –ø–æ–ª—É—á–∏–ª 5 –Ω–∞—Ä—É—à–µ–Ω–∏–π –∏ —Ç–µ–ø–µ—Ä—å –∑–∞–º—É—á–µ–Ω. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∞–º.",
                        parse_mode="Markdown"
                    )
                else:
                    await context.bot.send_message(
                        chat.id,
                        f"‚ö†Ô∏è {mention} ‚Äî –∞–¥–º–∏–Ω, –Ω–µ –º–æ–≥—É –∑–∞–º—É—Ç–∏—Ç—å.",
                        parse_mode="Markdown"
                    )

# üîï –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π
async def handle_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        try:
            await update.message.delete()
        except:
            pass

# üöÄ –°—Ç–∞—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(ChatMemberHandler(track_group, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, handle_member))
    app.add_handler(MessageHandler(filters.StatusUpdate.LEFT_CHAT_MEMBER, handle_member))
    app.add_handler(MessageHandler(filters.TEXT | filters.Caption, clean_messages))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —É–¥–∞–ª—è–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await app.run_polling()

# üèÅ –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    keep_alive()
    asyncio.run(main())
